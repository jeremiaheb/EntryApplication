---
- name: Provision server
  hosts: "*"
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Detect cloud instance
      ansible.builtin.stat:
        path: /etc/google_instance_id
      register: google_instance_id

    - name: Override cloud usernames
      ansible.builtin.set_fact:
        usernames:
          alindeman: andy_lindeman_noaa_gov
          jeremiaheb: jeremiah_blondeau_noaa_gov
      when: "google_instance_id.stat.exists"

    - name: Remove cloud-init ssh configuration for non-cloud instances
      ansible.builtin.file:
        path: "/etc/ssh/sshd_config.d/50-cloud-init.conf"
        state: absent
      when: "not google_instance_id.stat.exists"
      become: true

    - name: Remove cloud-init profile configuration for non-cloud instances
      ansible.builtin.file:
        path: "/etc/profile.d/Z99-cloudinit-warnings.sh"
        state: absent
      when: "not google_instance_id.stat.exists"
      become: true

    - name: Remove cloud-init netplan configuration for non-cloud instances
      ansible.builtin.file:
        path: "/etc/netplan/50-cloud-init.yaml"
        state: absent
      when: "not google_instance_id.stat.exists"
      become: true

    - name: Detect cloud-init configuration
      ansible.builtin.stat:
        path: "/etc/cloud/cloud.cfg.d"
      register: cloud_cfg_d

    - name: Disable cloud-init network configuration for non-cloud instances
      ansible.builtin.copy:
        dest: "/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
        mode: "0644"
        content: |
          network:
            config: disabled
      become: true
      when: "not google_instance_id.stat.exists and cloud_cfg_d.stat.exists and cloud_cfg_d.stat.isdir"

    - name: Disable cloud-init for non-cloud instances
      ansible.builtin.service:
        name: cloud-init
        enabled: false
        state: stopped
      become: true
      when: "not google_instance_id.stat.exists and 'cloud-init.service' in ansible_facts.services"

    - name: Disable cloud-init-local for non-cloud instances
      ansible.builtin.service:
        name: cloud-init-local
        enabled: false
        state: stopped
      become: true
      when: "not google_instance_id.stat.exists and 'cloud-init-local.service' in ansible_facts.services"

    - name: Enable ssh server
      ansible.builtin.service:
        name: ssh
        enabled: true
        state: started
      become: true

    - name: Set hostname
      ansible.builtin.hostname:
        name: entryapplication.nmfs.noaa.gov
      become: true

    - name: Replace hostname in /etc/hosts
      ansible.builtin.replace:
        path: /etc/hosts
        regexp: "^127.0.1.1 .*$"
        replace: "127.0.1.1 entryapplication entryapplication.nmfs.noaa.gov"
      become: true

    # IPv6 is not currently available in production. Make sure it does not
    # accidentally get enabled.
    - name: Disable ipv6
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.disable_ipv6
        value: "1"
        sysctl_file: "/etc/sysctl.d/99-disable-ipv6.conf"
        sysctl_set: true
      become: true

    - name: Create systemd service to regenerate openssh host keys
      ansible.builtin.copy:
        dest: /etc/systemd/system/reconfigure-openssh-server.service
        mode: "0644"
        content: |
          [Unit]
          Description=Regenerate SSH host keys if missing
          ConditionPathExists=!/etc/ssh/ssh_host_rsa_key
          Before=ssh.service

          [Service]
          Type=oneshot
          ExecStart=/usr/sbin/dpkg-reconfigure openssh-server
          RemainAfterExit=true

          [Install]
          WantedBy=multi-user.target
      become: true

    - name: Enable systemd service for reconfigure-openssh-server
      ansible.builtin.service:
        name: reconfigure-openssh-server
        enabled: true
      become: true

    - name: Install required packages
      ansible.builtin.package:
        name:
          - build-essential
          - libedit-dev
          - libffi-dev
          - libpq-dev
          - libyaml-dev
          - sendmail
          - unzip
          - zlib1g-dev
      become: true

    - name: Install required libraries for ansible
      ansible.builtin.package:
        name:
          # Required for https://docs.ansible.com/ansible-core/2.17/playbook_guide/playbooks_privilege_escalation.html#risks-of-becoming-an-unprivileged-user
          - acl
          # Required for community.postgresql
          - python3-psycopg2
      become: true

    - name: Create user alindeman
      ansible.builtin.user:
        name: "{{ usernames['alindeman'] | default('alindeman') }}"
        create_home: true
        password: "!" # disable password
        shell: /bin/bash
        groups:
          - users
          - sudo
      become: true

    - name: Install ssh key for alindeman
      ansible.posix.authorized_key:
        user: "{{ usernames['alindeman'] | default('alindeman') }}"
        key: "https://github.com/alindeman-NOAA.keys"
      become: true

    - name: Create user jeremiaheb
      ansible.builtin.user:
        name: "{{ usernames['jeremiaheb'] | default('jeremiaheb') }}"
        create_home: true
        password: "!" # disable password
        shell: /bin/bash
        groups:
          - users
          - sudo
      become: true

    - name: Install ssh key for jeremiaheb
      ansible.posix.authorized_key:
        user: "{{ usernames['jeremiaheb'] | default('jeremiaheb') }}"
        key: "https://github.com/jeremiaheb.keys"
      become: true

    - name: Install postgresql server
      ansible.builtin.package:
        name:
          - postgresql
          - postgresql-contrib
      become: true

    - name: Create entryapplication_development database user
      community.postgresql.postgresql_user:
        name: entryapplication_development
        password: entryapplication_development
      become: true
      become_user: postgres

    - name: Create entryapplication_development database
      community.postgresql.postgresql_db:
        name: entryapplication_development
        owner: entryapplication_development
      become: true
      become_user: postgres

    - name: Create entryapplication_test database user
      community.postgresql.postgresql_user:
        name: entryapplication_test
        password: entryapplication_test
        # Required to create temporary datdabases for test parallelization
        role_attr_flags: "CREATEDB"
      become: true
      become_user: postgres

    - name: Create entryapplication_test database
      community.postgresql.postgresql_db:
        name: entryapplication_test
        owner: entryapplication_test
      become: true
      become_user: postgres

    - name: Create entryapplication_production database user
      community.postgresql.postgresql_user:
        name: entryapplication_production
        password: entryapplication_production
      become: true
      become_user: postgres

    - name: Create entryapplication_production databases
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        owner: entryapplication_production
      with_items:
        - "entryapplication_production"
        - "entryapplication_production_cable"
        - "entryapplication_production_cache"
        - "entryapplication_production_queue"
      become: true
      become_user: postgres

    - name: Install apache2 server
      ansible.builtin.package:
        name: apache2
      become: true

    - name: Disable default apache2 index page
      ansible.builtin.file:
        path: "/var/www/html/index.html"
        state: absent
      become: true

    - name: Disable serve-cgi-bin apache2 conf
      ansible.builtin.command:
        cmd: "a2disconf serve-cgi-bin"
        removes: "/etc/apache2/conf-enabled/serve-cgi-bin.conf"
      become: true
      notify: Reload apache2

    - name: Disable default apache2 site
      ansible.builtin.command:
        cmd: "a2dissite 000-default"
        removes: "/etc/apache2/sites-enabled/000-default.conf"
      become: true
      notify: Reload apache2

    - name: Enable proxy_http apache2 module
      ansible.builtin.command:
        cmd: "a2enmod proxy_http"
        creates: "/etc/apache2/mods-enabled/proxy_http.load"
      become: true
      notify: Restart apache2

    - name: Enable headers apache2 module
      ansible.builtin.command:
        cmd: "a2enmod headers"
        creates: "/etc/apache2/mods-enabled/headers.load"
      become: true
      notify: Restart apache2

    - name: Create entryapplication apache2 site
      ansible.builtin.copy:
        dest: "/etc/apache2/sites-available/entryapplication.conf"
        mode: "0644"
        content: |
          Listen 8000
          <VirtualHost *:80 *:8000>
            # Static assets
            <Directory "/var/www/apps/EntryApplication/current/public">
              Options FollowSymLinks
              AllowOverride None
              Require all granted
            </Directory>

            ProxyPass "/ncrmp_data_entry/assets" "!"
            Alias "/ncrmp_data_entry/assets" "/var/www/apps/EntryApplication/current/public/ncrmp_data_entry/assets"
            ProxyPass "/ncrmp_data_entry" "unix:////var/www/apps/EntryApplication/shared/tmp/sockets/puma.sock|http://localhost/ncrmp_data_entry"
            ProxyPassReverse "/ncrmp_data_entry" "unix:////var/www/apps/EntryApplication/shared/tmp/sockets/puma.sock|http://localhost/ncrmp_data_entry"

            ProxyPass "/caribbean_data_entry/assets" "!"
            Alias "/caribbean_data_entry/assets" "/var/www/apps/EntryApplication/current/public/caribbean_data_entry/assets"
            ProxyPass "/caribbean_data_entry" "unix:////var/www/apps/EntryApplication/shared/tmp/sockets/puma.sock|http://localhost/caribbean_data_entry"
            ProxyPassReverse "/caribbean_data_entry" "unix:////var/www/apps/EntryApplication/shared/tmp/sockets/puma.sock|http://localhost/caribbean_data_entry"

            # Assume TLS-terminating proxy when host is noaa.gov
            <If "%{HTTP_HOST} =~ /\.noaa\.gov$/">
              RequestHeader set X-Forwarded-Proto "https"
            </If>

            ErrorLog "${APACHE_LOG_DIR}/error.log"
            CustomLog "${APACHE_LOG_DIR}/access.log" combined
          </VirtualHost>
      become: true
      notify: Reload apache2

    - name: Enable entryapplication apache2 site
      ansible.builtin.command:
        cmd: "a2ensite entryapplication"
        creates: "/etc/apache2/sites-enabled/entryapplication.conf"
      become: true
      notify: Reload apache2

    - name: Create /var/www directory
      ansible.builtin.file:
        path: /var/www
        owner: root
        group: root
        mode: "0755"
        state: directory
      become: true

    - name: Create /var/www/apps directory
      ansible.builtin.file:
        path: /var/www/apps
        owner: root
        group: root
        mode: "0755"
        state: directory
      become: true

    - name: Create user entryapplication
      ansible.builtin.user:
        name: entryapplication
        home: /var/www/apps/EntryApplication
        create_home: true
        password: "!" # disable password
        shell: /bin/bash
      become: true

    - name: Make entryapplication directory world readable
      ansible.builtin.file:
        path: /var/www/apps/EntryApplication
        mode: "0755"
        owner: "entryapplication"
        group: "entryapplication"
        state: "directory"
      become: true

    - name: Make entryapplication socket directory world readable
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0755"
        owner: "entryapplication"
        group: "entryapplication"
        state: "directory"
      become: true
      with_items:
        - "/var/www/apps/EntryApplication/shared"
        - "/var/www/apps/EntryApplication/shared/tmp"
        - "/var/www/apps/EntryApplication/shared/tmp/sockets"

    - name: Add /vagrant as a safe git directory for local deployments
      ansible.builtin.copy:
        dest: /var/www/apps/EntryApplication/.gitconfig
        content: |
          [safe]
          directory = /vagrant/.git
        owner: entryapplication
        group: entryapplication
        mode: "0644"
      become: true
      become_user: entryapplication

    - name: Install deploy keys for entryapplication
      ansible.posix.authorized_key:
        user: entryapplication
        key: "https://github.com/{{ item }}.keys"
      become: true
      with_items:
        # GitHub usernames
        - "alindeman-NOAA"
        - "jeremiaheb"

    - name: Install rbenv
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv"
        dest: "/var/www/apps/EntryApplication/.rbenv"
        version: "v1.3.2"
      become: true
      become_user: entryapplication

    - name: Install ruby-build
      ansible.builtin.git:
        repo: "https://github.com/rbenv/ruby-build"
        dest: "/var/www/apps/EntryApplication/.rbenv/plugins/ruby-build"
        version: "v20250716"
      become: true
      become_user: entryapplication

    - name: Add rbenv init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/EntryApplication/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED RBENV INIT"
        block: |
          eval "$(~/.rbenv/bin/rbenv init - --no-rehash bash)"
      become: true
      become_user: entryapplication

    - name: Add convenient environment variables to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/EntryApplication/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED ENV INIT"
        block: |
          export RAILS_ENV="production"
      become: true
      become_user: entryapplication

    - name: Install ruby
      ansible.builtin.command:
        cmd: "/var/www/apps/EntryApplication/.rbenv/bin/rbenv install 3.2.8"
        creates: "/var/www/apps/EntryApplication/.rbenv/versions/3.2.8"
      become: true
      become_user: entryapplication

    - name: Install nvm
      ansible.builtin.git:
        repo: "http://github.com/nvm-sh/nvm"
        dest: "/var/www/apps/EntryApplication/.nvm"
        version: "v0.40.3"
        recursive: false
      become: true
      become_user: entryapplication

    - name: Add nvm init to ~/.bashrc
      ansible.builtin.blockinfile:
        path: "/var/www/apps/EntryApplication/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED NVM INIT"
        block: |
          source "$HOME/.nvm/nvm.sh"
      become: true
      become_user: entryapplication

    - name: Add nvm init as rbenv exec hook
      ansible.builtin.copy:
        dest: "/var/www/apps/EntryApplication/.rbenv/rbenv.d/exec/nvm.bash"
        mode: "0644"
        content: |
          source "$HOME/.nvm/nvm.sh"
      become: true
      become_user: entryapplication

    - name: Install node
      ansible.builtin.shell: |
        . "$HOME/.nvm/nvm.sh" --no-use
        nvm install 22.16.0
      args:
        executable: /bin/bash
        creates: "/var/www/apps/EntryApplication/.nvm/versions/node/v22.16.0"
      become: true
      become_user: entryapplication

    - name: Install yarn package manager
      community.general.npm:
        name: yarn
        version: "1.22.22"
        global: true
      environment:
        PATH: "/var/www/apps/EntryApplication/.nvm/versions/node/v22.16.0/bin:{{ ansible_env.PATH }}"
      become: true
      become_user: entryapplication

    - name: Create systemd socket for entryapplication
      ansible.builtin.copy:
        dest: /etc/systemd/system/entryapplication.socket
        mode: "0644"
        content: |
          [Unit]
          Description=EntryApplication

          [Socket]
          ListenStream=/var/www/apps/EntryApplication/shared/tmp/sockets/puma.sock
          SocketUser=entryapplication
          SocketGroup=entryapplication
          ReusePort=true
          Backlog=1024

          [Install]
          WantedBy=sockets.target
      become: true

    - name: Enable systemd socket for entryapplication
      ansible.builtin.service:
        name: entryapplication.socket
        enabled: true
      become: true

    - name: Create systemd service for entryapplication
      ansible.builtin.copy:
        dest: /etc/systemd/system/entryapplication.service
        mode: "0644"
        content: |
          [Unit]
          Description=EntryApplication
          After=network.target
          Requires=entryapplication.socket

          [Service]
          User=entryapplication
          Group=entryapplication
          WorkingDirectory=/var/www/apps/EntryApplication/current
          Environment=RAILS_ENV=production RAILS_LOG_TO_STDOUT=true
          ExecStart=/var/www/apps/EntryApplication/.rbenv/bin/rbenv exec bundle exec puma -C /var/www/apps/EntryApplication/current/config/puma.rb --bind-to-activated-sockets=only
          RestartSec=1
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      become: true
      notify: Restart entryapplication

    - name: Enable systemd service for entryapplication
      ansible.builtin.service:
        name: entryapplication.service
        enabled: true
      become: true

    - name: Allow entryapplication to manage its systemd service
      ansible.builtin.copy:
        dest: /etc/sudoers.d/entryapplication
        content: |
          entryapplication ALL=(ALL) NOPASSWD: /usr/bin/systemctl start entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /bin/systemctl start entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /usr/bin/systemctl stop entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /bin/systemctl stop entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /usr/bin/systemctl reload entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /bin/systemctl reload entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart entryapplication.service
          entryapplication ALL=(ALL) NOPASSWD: /bin/systemctl restart entryapplication.service
        owner: root
        group: root
        mode: "0440"
      become: true

    # --------------------------
    # The following tasks are conditional on `development_build` being defined,
    # meaning this playbook is running in Vagrant for local development. The
    # tasks are skipped because they are meaningless for the production virtual
    # machine, which is not used with Vagrant.
    # --------------------------
    - name: Install required packages for development
      ansible.builtin.package:
        name:
          - xdg-utils # for chrome/chromedriver
          - libgbm1 # for chrome/chromedriver
          - libasound2 # chrome chrome/chromedriver
          - python3-pip # for python requirements
      become: true
      when: development_build is defined

    - name: Add pip user directory to PATH
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED PIP INIT"
        block: |
          export PATH="$PATH:$HOME/.local/bin"
      when: development_build is defined

    # See https://googlechromelabs.github.io/chrome-for-testing/ for latest versions
    - name: Download chrome binary
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.92/linux64/chrome-linux64.zip"
        dest: "{{ ansible_user_dir }}/chrome-linux64.zip"
        mode: "0644"
      when: development_build is defined

    - name: Unzip chrome binary
      ansible.builtin.unarchive:
        src: "{{ ansible_user_dir }}/chrome-linux64.zip"
        dest: "{{ ansible_user_dir }}"
        mode: "0755"
        remote_src: true
      when: development_build is defined

    - name: Download chromedriver binary
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/chrome-for-testing-public/138.0.7204.92/linux64/chromedriver-linux64.zip"
        dest: "{{ ansible_user_dir }}/chromedriver-linux64.zip"
        mode: "0644"
      when: development_build is defined

    - name: Unzip chromedriver binary
      ansible.builtin.unarchive:
        src: "{{ ansible_user_dir }}/chromedriver-linux64.zip"
        dest: "{{ ansible_user_dir }}"
        mode: "0755"
        remote_src: true
      when: development_build is defined

    - name: Add chrome and chromedriver to PATH
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED CHROMEDRIVER INIT"
        block: |
          export PATH="$PATH:$HOME/chrome-linux64:$HOME/chromedriver-linux64"
      when: development_build is defined

    # We occasionally see timeouts of this service when using virtualized
    # network interfaces. It does not always happen, but when it does, it makes
    # the boot take a very long time.
    #
    # At some point in the future it may be good to remove this and see if the
    # problem still exists.
    - name: Disable waiting for network on boot
      ansible.builtin.service:
        name: systemd-networkd-wait-online
        enabled: false
      become: true
      when: development_build is defined

    - name: Install rbenv (development)
      ansible.builtin.git:
        repo: "https://github.com/rbenv/rbenv"
        dest: "{{ ansible_user_dir }}/.rbenv"
        version: "v1.3.2"
      when: development_build is defined

    - name: Install ruby-build (development)
      ansible.builtin.git:
        repo: "https://github.com/rbenv/ruby-build"
        dest: "{{ ansible_user_dir }}/.rbenv/plugins/ruby-build"
        version: "v20250716"
      when: development_build is defined

    - name: Add rbenv init to ~/.bashrc (development)
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED RBENV INIT"
        block: |
          eval "$(~/.rbenv/bin/rbenv init - --no-rehash bash)"
      when: development_build is defined

    - name: Install ruby (development)
      ansible.builtin.command:
        cmd: "{{ ansible_user_dir }}/.rbenv/bin/rbenv install 3.2.8"
        creates: "{{ ansible_user_dir }}/.rbenv/versions/3.2.8"
      when: development_build is defined

    - name: Install nvm (development)
      ansible.builtin.git:
        repo: "http://github.com/nvm-sh/nvm"
        dest: "{{ ansible_user_dir }}/.nvm"
        version: "v0.40.3"
        recursive: false
      when: development_build is defined

    - name: Add nvm init to ~/.bashrc (development)
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED NVM INIT"
        block: |
          source "$HOME/.nvm/nvm.sh"
      when: development_build is defined

    - name: Install node (development)
      ansible.builtin.shell: |
        . "$HOME/.nvm/nvm.sh" --no-use
        nvm install 22.16.0
      args:
        executable: /bin/bash
        creates: "{{ ansible_user_dir }}/.nvm/versions/node/v22.16.0"
      when: development_build is defined

    - name: Install yarn package manager (development)
      community.general.npm:
        name: yarn
        version: "1.22.22"
        global: true
      environment:
        PATH: "{{ ansible_user_dir }}/.nvm/versions/node/v22.16.0/bin:{{ ansible_env.PATH }}"
      when: development_build is defined

    - name: Add automatic cd to /vagrant in ~/.bashrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED CD INIT"
        block: |
          if [ "${PWD-}" = "/home/vagrant" ]; then
            cd /vagrant
          fi
      when: development_build is defined

    - name: Create /home/vagrant/node_modules
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/node_modules"
        mode: "0755"
        state: directory
      when: development_build is defined

    - name: Bind mount /vagrant/node_modules to /home/vagrant/node_modules so it supports symbolic links
      ansible.posix.mount:
        src: "/home/vagrant/node_modules"
        path: "/vagrant/node_modules"
        fstype: "none"
        opts: "bind,nofail"
        state: mounted
      become: true
      when: development_build is defined

  handlers:
    - name: Reload apache2
      ansible.builtin.service:
        name: apache2
        state: reloaded
      become: true

    - name: Restart apache2
      ansible.builtin.service:
        name: apache2
        state: restarted
      become: true

    - name: Restart entryapplication
      ansible.builtin.service:
        name: entryapplication
        state: restarted
      become: true

    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted
      become: true
